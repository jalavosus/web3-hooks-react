import {Signer} from "ethers";
import {Provider} from "@ethersproject/providers";
import {useState} from "react";

export type ConnectContractFn<T> = (address: string, provider: Signer | Provider) => T

export interface useContractParams<T> {
	/**
	 * can be any of:
	 *  - window.ethereum
	 *  - an "ethereum" object returned by something like useMetamask
	 *  - an object implementing the ethersjs Provider interface (such as JsonRpcProvider or Web3Provider)
	 *  - an object implementing the ethersjs Signer interface.
	 */
	ethereum: any | Provider | Signer;
	/** Contract address */
	contractAddress: string;
	/** A connect function generated by dethcrypto/typechain (specifically with ethers-v5 as target) */
	connect: ConnectContractFn<T>
}

/**
 * Wraps a dethcrypto/typechain generated ABI (and its factory function) with a hook for ease of use
 * in frontend.
 *
 * @param {useContractParams} params - ethereum instance, contract address, and factory connect function.
 */
export function useContract<T>(params: useContractParams<T>) {
	const [contract, setContract] = useState<T>(params.connect(params.contractAddress, params.ethereum));

	return [contract] as const
}